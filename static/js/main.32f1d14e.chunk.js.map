{"version":3,"sources":["Messages.js","App.js","messageText.js","utils.js","symbols.js","reportWebVitals.js","index.js"],"names":["Message","textMessage","className","App","useState","password","setPassword","passwordLength","setPasswordLength","UpperCase","setUpperCase","LowerCase","setLowerCase","Numbers","setNumbers","Symbols","setSymbols","message","setMes","id","onClick","text","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","setTimeout","htmlFor","defaultValue","onChange","e","target","value","type","max","min","checked","symbolsList","generateSymbolsList","lengthSymbolsList","length","i","index","Math","round","random","charAt","generatePassword","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.32f1d14e.chunk.js","sourcesContent":["import './Messages.css';\r\n\r\nexport function Message({ textMessage }) {\r\n    return textMessage ? (\r\n        <div className='message'>\r\n            <p>{textMessage}</p>\r\n        </div>\r\n    ) : null\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Message } from './Messages';\r\nimport { NOTHING_TO_COPY, SELECT_OPTION, COPY_SUCCESSFUL } from './messageText';\r\nimport { generateSymbolsList, generatePassword, copyToClipboard } from './utils';\r\n\r\nfunction App() {\r\n  const [password, setPassword] = useState('');\r\n  const [passwordLength, setPasswordLength] = useState(10);\r\n  const [UpperCase, setUpperCase] = useState(false);\r\n  const [LowerCase, setLowerCase] = useState(false);\r\n  const [Numbers, setNumbers] = useState(false);\r\n  const [Symbols, setSymbols] = useState(false);\r\n  const [message, setMes] = useState(false);\r\n\r\n  const handleGeneratePassword = () => {\r\n    let symbolsList = generateSymbolsList({ UpperCase, LowerCase, Numbers, Symbols });\r\n    if (symbolsList === '') {\r\n      setMes(SELECT_OPTION)\r\n    } else {\r\n      setMes(false)\r\n    }\r\n    setPassword(generatePassword(symbolsList, passwordLength))\r\n  }\r\n\r\n  const handleCopyPassword = () => {\r\n    if (password === '') {\r\n      setMes(NOTHING_TO_COPY)\r\n    } else {\r\n      copyToClipboard(password)\r\n      setMes(COPY_SUCCESSFUL);\r\n    }\r\n    setTimeout(() => setMes(false), 1500);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <section className='section'>\r\n        <div className='container'>\r\n          <h1 className='title'>Password Generator</h1>\r\n          <div className='output-password'>\r\n            <h3 id='password'>{password}</h3>\r\n            <button onClick={handleCopyPassword} className='copy-btn'>Copy</button>\r\n          </div>\r\n\r\n          <div className='specification'>\r\n            <label htmlFor='password-length'>Password Length</label>\r\n            <div className='displayFlex'>\r\n              <p className='passwordLengthValue'>{passwordLength}</p>\r\n              <input defaultValue={passwordLength}\r\n                onChange={(e) => setPasswordLength(e.target.value)}\r\n                type='range' id='password-length' max='15' min='5' />\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className='specification'>\r\n            <label htmlFor='uppercase-letters'>Uppercase</label>\r\n            <input checked={UpperCase}\r\n              onChange={(e) => setUpperCase(e.target.checked)}\r\n              type='checkbox' className='checkbox' id='uppercase-letters' />\r\n          </div>\r\n\r\n          <div className='specification'>\r\n            <label htmlFor='lowercase-letters'>Lowercase</label>\r\n            <input checked={LowerCase}\r\n              onChange={(e) => setLowerCase(e.target.checked)}\r\n              type='checkbox' className='checkbox' id='lowercase-letters' />\r\n          </div>\r\n\r\n          <div className='specification'>\r\n            <label htmlFor='include-numbers'>Numbers</label>\r\n            <input checked={Numbers}\r\n              onChange={(e) => setNumbers(e.target.checked)}\r\n              type='checkbox' className='checkbox' id='include-numbers' />\r\n          </div>\r\n\r\n          <div className='specification'>\r\n            <label htmlFor='include-symbols'>Symbols</label>\r\n            <input checked={Symbols}\r\n              onChange={(e) => setSymbols(e.target.checked)}\r\n              type='checkbox' className='checkbox' id='include-symbols' />\r\n          </div>\r\n\r\n          <button onClick={handleGeneratePassword} className='generate-btn'>Generate Password</button>\r\n\r\n        </div>\r\n        <Message textMessage={message} />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const NOTHING_TO_COPY = 'Nothing to copy';\r\nexport const SELECT_OPTION = 'You must select atleast one option';\r\nexport const COPY_SUCCESSFUL = 'Password successfully copied to clipboard';","import { numbers, upperCaseLetters, lowerCaseLetters, specialSymbols } from './symbols';\r\n\r\nexport function generateSymbolsList({ UpperCase, LowerCase, Numbers, Symbols }) {\r\n    let symbolsList = '';\r\n    if (UpperCase) {\r\n        symbolsList += upperCaseLetters\r\n    }\r\n    if (LowerCase) {\r\n        symbolsList += lowerCaseLetters\r\n    }\r\n    if (Numbers) {\r\n        symbolsList += numbers\r\n    }\r\n    if (Symbols) {\r\n        symbolsList += specialSymbols\r\n    }\r\n    return symbolsList;\r\n}\r\n\r\nexport function generatePassword(symbolsList, passwordLength) {\r\n    let password = '';\r\n    const lengthSymbolsList = symbolsList.length;\r\n\r\n    for (let i = 0; i < passwordLength; i++) {\r\n        const index = Math.round(Math.random() * lengthSymbolsList);\r\n        password += symbolsList.charAt(index)\r\n    }\r\n    return password\r\n}\r\n\r\nexport function copyToClipboard(text) {\r\n    const newTextArea = document.createElement('textarea');\r\n    newTextArea.innerText = text;\r\n    document.body.appendChild(newTextArea)\r\n    newTextArea.select();\r\n    document.execCommand('copy');\r\n    newTextArea.remove();\r\n}","export const numbers = '0123456789';\r\nexport const upperCaseLetters = 'ABCDEFJHIJKLMNOPQRSTUVWXYZ';\r\nexport const lowerCaseLetters = 'abcdefjhijklmnopqrstuvwxyz';\r\nexport const specialSymbols = \"!'^+%&/()=?_#${}[]|;:><.*-~`@,\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}